// This file is for testing 08-server.js

const express = require('express');
const request = require('supertest');
const expect = require('expect'); // Library to make assertions

const { 
    app, // This test file will test the app so we need to require it in order to test it.
    Todo // This test file will only require the Todo model and the User model.
} = require('./08-server');
const { ObjectID } = require('mongodb');

// Use a describe block to make things look grat on in the output
/* describe('POST /todos', () => {
    it('Should create a new todo in the database', (done) => {
        request(app)
        .post('/todos')
        .send({
            "title": "[Test] This todo was generated by a test file",
            "text": "Some details about the todo",
            "category": "Test",
            "priority": 2
        })
        .expect(200)
        .expect((res) => { // Expect allow us to access the response object
            expect(res.body.priority).toEqual(2);
        })
        .end((err, reponse) => {
            if (err) {
                return done(err);
            }
            Todo.find().then((todos) => {
                expect(todos.length).toBe(1);
                expect(todos[0].priority).toBe(2);
                done();
            }, (err) => {
                done(err);
            });
        });
    });
}); */

// Define code that will be executed before each test
beforeEach((done) => {
    Todo.remove({}).then(() => {
        done();
    }, (err) => {
        console.log(err);
    });
});
// With this, the todos collection is going to be empty before every request

describe('POST /todos', () => {
    it('Should create a new todo in the database', (done) => {
        request(app)
        .post('/todos')
        .send({
            "title": "[Test] This todo was generated by a test file",
            "text": "Some details about the todo",
            "category": "Test",
            "priority": 2
        })
        .expect(200)
        .expect((res) => { // Expect allow us to access the response object
            expect(res.body.priority).toEqual(2);
        })
        .end((err, reponse) => {
            if (err) {
                return done(err);
            }
            Todo.find().then((todos) => {
                expect(todos.length).toBe(1);
                expect(todos[0].priority).toBe(2);
                done();
            }, (err) => {
                done(err);
            });
        });
    });

    it('Should not create the todo with invalid body data', (done) => {
        request(app)
        .post('/todos')
        .send({})
        .expect(400)
        .end((err, reponse) => {
            if (err) {
                return done(err);
            }
            Todo.find().then((todos) => {
                expect(todos.length).toBe(0);
                done();
            }, (err) => {
                console.log(err);
                done(err);
            });
        });
    });
});

// TODO: TAREA (jarcor)
// 1. Crear una ruta para actualizar cualquier valor de un todo. Hint1: app.patch('/todos', (request, response) => {...} . Hint2: Todo.update({}, { $set: { property: value } }).
// 2. Hacer una assertion (it(...)) que pruebe una ruta del punto 1 para actualizar un todo.
// 3. Al terminar la llamada de la prueba verificar que efectivamente el todo fue actualizado al nuevo valor.

describe('PATCH /todos/:id', () => {
    it('Should update the todo with new data', (done) => {
        const todo = new Todo({
            "title": "[Test] This todo was generated by a test file",
            "text": "Some details about the todo",
            "category": "Test",
            "priority": 2
        });
        todo.save().then((res) => {
            const todoId = res._id;
            request(app)
            .patch(`/todos/${new ObjectID(todoId)}`)
            .send({
                "priority": 2,
                "text": "Download Visual Studio"
            })
            .expect(200)
            .end((err, reponse) => {
                if (err) {
                    return done(err);
                }
                Todo.findById(todoId).then((todo) => {
                    expect(todo.priority).toBe(2);
                    done();
                }, (err) => {
                    console.log(err);
                    done(err);
                });
            });
        }, (err) => {
            console.log('Unable to save todo', err);
        });
    });
});

